import time
import logging
from sqlite3 import OperationalError

from fastapi import FastAPI, Depends, HTTPException
from sqlalchemy.future import select

from models.request import TelegramIdRequest, GoToRequest, SpendRequest
from models.tables import User, Session, Base, Stat, UserStat
from db_init import engine, get_session
from sqlalchemy.ext.asyncio import AsyncSession
import json
from datetime import date
from pathlib import Path
import traceback

# –ª–æ–≥–≥–µ—Ä
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = FastAPI()

# –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–π —Å—Ü–µ–Ω—ã –∏–≥—Ä—ã
START_SCENE_ID = "scene1"
# –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞—Å—Å–∞–∂–µ–π (—Å—Ü–µ–Ω) –∏–≥—Ä—ã
PASSAGES = {}
# —Ä–∞–∑–º–µ—Ä –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞
bonus_amount = 5
base_dir = Path(__file__).parent
# –ª–æ–∫–∞—Ü–∏—è –ø–∞—Å—Å–∞–∂–µ–π
passages_path = base_dir / "parser" / "passages.json"
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã—Ö —Å—Ç–∞—Ç
PREDEFINED_STATS = [
    {"code": "quiet", "name": "–¢–∏—Ö–æ–Ω—è"},
    {"code": "rebel", "name": "–ë—É–Ω—Ç–∞—Ä–∫–∞"},
    {"code": "reputation", "name": "–†–µ–ø—É—Ç–∞—Ü–∏—è"},
]
story_id = "default"

@app.on_event("startup")
async def startup():
    global PASSAGES
    logger.info("‚è≥ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü")
    max_tries = 10
    for i in range(max_tries):
        try:
            async with engine.begin() as conn:
                await conn.run_sync(Base.metadata.create_all)
            logger.info("‚úÖ –¢–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã")
            break
        except OperationalError:
            logger.warning(f"‚è≥ DB not ready, waiting... ({i + 1}/{max_tries})")
            time.sleep(2)
    else:
        logger.error("‚ùå Database not available after retries")
        raise RuntimeError("Database not available after retries")

    logger.info(f"üìñ –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑ {passages_path}")
    with open(passages_path, encoding="utf-8") as f:
        PASSAGES = json.load(f)
    logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(PASSAGES)} —Å—Ü–µ–Ω")

    # üíæ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã—Ö —Å—Ç–∞—Ç
    PREDEFINED_STATS = [
        {"code": "quiet", "name": "–¢–∏—Ö–æ–Ω—è"},
        {"code": "rebel", "name": "–ë—É–Ω—Ç–∞—Ä–∫–∞"},
        {"code": "reputation", "name": "–†–µ–ø—É—Ç–∞—Ü–∏—è"},
    ]
    story_id = "default"

    async with engine.begin() as conn:
        for stat_def in PREDEFINED_STATS:
            result = await conn.execute(
                select(Stat).where(
                    Stat.code == stat_def["code"],
                    Stat.story_id == story_id
                )
            )
            if result.scalar_one_or_none() is None:
                await conn.execute(
                    Stat.__table__.insert().values(
                        code=stat_def["code"],
                        name=stat_def["name"],
                        story_id=story_id
                    )
                )
                logger.info(f"üÜï –°—Ç–∞—Ç–∞ '{stat_def['code']}' —Å–æ–∑–¥–∞–Ω–∞")
            else:
                logger.info(f"‚úÖ –°—Ç–∞—Ç–∞ '{stat_def['code']}' —É–∂–µ –µ—Å—Ç—å")

@app.post("/init_user")
async def init_user(req: TelegramIdRequest, db: AsyncSession = Depends(get_session)):
    logger.info(f"üë§ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {req.telegram_id}")
    result = await db.execute(select(User).where(User.telegram_id == req.telegram_id))
    user = result.scalar_one_or_none()

    if not user:
        user = User(telegram_id=req.telegram_id, balance=10)
        db.add(user)
        await db.commit()
        logger.info(f"üÜï –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {req.telegram_id}")

    return {"status": "ok"}


@app.post("/start")
async def start_game(req: TelegramIdRequest, db: AsyncSession = Depends(get_session)):
    logger.info(f"‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç –∏–≥—Ä—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {req.telegram_id}")
    telegram_id = req.telegram_id
    result = await db.execute(select(User).where(User.telegram_id == telegram_id))
    user = result.scalar_one_or_none()

    if user is None:
        logger.info(f"üîß –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {telegram_id}")
        user = User(telegram_id=telegram_id)
        db.add(user)
        await db.flush()

        session = Session(user_id=user.id, current_scene_id=START_SCENE_ID)
        db.add(session)
    else:
        result = await db.execute(select(Session).where(Session.user_id == user.id))
        session = result.scalar_one_or_none()
        if session is None:
            session = Session(user_id=user.id, current_scene_id=START_SCENE_ID)
            db.add(session)

    await db.commit()
    return {"scene_id": session.current_scene_id, "balance": user.balance}


@app.post("/progress")
async def get_progress(req: TelegramIdRequest, db: AsyncSession = Depends(get_session)):
    telegram_id = req.telegram_id
    logger.info(f"üì• –ó–∞–ø—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è: {telegram_id}")
    result = await db.execute(select(User).where(User.telegram_id == telegram_id))
    user = result.scalar_one_or_none()
    if not user:
        raise HTTPException(status_code=404, detail="User not found")

    result = await db.execute(select(Session).where(Session.user_id == user.id))
    session = result.scalar_one_or_none()
    if not session:
        raise HTTPException(status_code=404, detail="Session not found")

    logger.info(f"üì§ –û—Ç–¥–∞–µ–º —Å—Ü–µ–Ω—É: {session.current_scene_id}")
    scene = PASSAGES.get(session.current_scene_id)
    if not scene:
        raise HTTPException(status_code=500, detail="Scene not found")

    return {
        **scene,
        "balance": user.balance
    }

@app.post("/go_to")
async def go_to_scene(req: GoToRequest, db: AsyncSession = Depends(get_session)):
    telegram_id = req.telegram_id
    target_scene_id = req.target_scene_id
    logger.info(f"‚û°Ô∏è –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å—Ü–µ–Ω–µ {target_scene_id} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")

    try:
        # 1. –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = await db.execute(select(User).where(User.telegram_id == telegram_id))
        user = result.scalar_one_or_none()
        if not user:
            raise HTTPException(status_code=404, detail="User not found")

        # 2. –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é
        result = await db.execute(select(Session).where(Session.user_id == user.id))
        session = result.scalar_one_or_none()
        if not session:
            raise HTTPException(status_code=404, detail="Session not found")

        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ü–µ–Ω—É
        current_scene_id = session.current_scene_id
        current_scene = PASSAGES.get(current_scene_id)
        if not current_scene:
            raise HTTPException(status_code=500, detail="Current scene not found")

        # 4. –ò—â–µ–º –≤—ã–±–æ—Ä
        current_scene_id = session.current_scene_id
        current_scene = PASSAGES.get(current_scene_id)
        if not current_scene:
            raise HTTPException(status_code=500, detail="Current scene not found")

        matching_choice = next((c for c in current_scene.get("choices", []) if c["target"] == target_scene_id), None)

        if not matching_choice:
            # –ø—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ —ç—Ç–æ –ø–µ—Ä–µ—Ö–æ–¥ –ø–æ autonext
            if current_scene.get("autonext") == target_scene_id:
                logger.info(f"üîÑ –ü–µ—Ä–µ—Ö–æ–¥ –ø–æ autonext —Å–æ —Å—Ü–µ–Ω—ã {current_scene_id} ‚Üí {target_scene_id}")
            else:
                raise HTTPException(status_code=400, detail="Invalid choice")

        # 5. –ü—Ä–∏–º–µ–Ω—è–µ–º stat
        if matching_choice and "stat" in matching_choice:
            stat_code = matching_choice["stat"]
            logger.info(f"üìà –î–æ–±–∞–≤–ª—è–µ–º –æ—á–∫–æ —Å—Ç–∞—Ç—ã '{stat_code}' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}")
            story_id = "default"

            stat_result = await db.execute(select(Stat).where(Stat.code == stat_code, Stat.story_id == story_id))
            stat = stat_result.scalar_one_or_none()

            if stat:
                user_stat_result = await db.execute(
                    select(UserStat).where(UserStat.user_id == user.id, UserStat.stat_id == stat.id)
                )
                user_stat = user_stat_result.scalar_one_or_none()

                if user_stat:
                    user_stat.value += 1
                    logger.info(f"üîÑ –°—Ç–∞—Ç–∞ {stat_code} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–æ {user_stat.value}")
                else:
                    db.add(UserStat(user_id=user.id, stat_id=stat.id, value=1))
                    logger.info(f"üÜï –°—Ç–∞—Ç–∞ {stat_code} —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            else:
                logger.warning(f"‚ö†Ô∏è –°—Ç–∞—Ç–∞ '{stat_code}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ stat")

        # 6. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ü–µ–Ω—É
        session.current_scene_id = target_scene_id
        await db.commit()

        # 7. –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é —Å—Ü–µ–Ω—É
        next_scene = PASSAGES.get(target_scene_id)
        if not next_scene:
            raise HTTPException(status_code=500, detail="Next scene not found")

        return {
            **next_scene,
            "balance": user.balance,
        }

    except Exception as e:
        logger.error("‚ùå –û—à–∏–±–∫–∞ –≤ /go_to:\n" + traceback.format_exc())
        await db.rollback()
        raise HTTPException(status_code=500, detail="Internal server error")


@app.post("/daily_bonus")
async def daily_bonus(req: TelegramIdRequest, db: AsyncSession = Depends(get_session)):
    telegram_id = req.telegram_id
    logger.info(f"üéÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–æ–Ω—É—Å–∞ –¥–ª—è {telegram_id}")
    result = await db.execute(select(User).where(User.telegram_id == telegram_id))
    user = result.scalar_one_or_none()
    if not user:
        raise HTTPException(status_code=404, detail="User not found")

    today = date.today()
    if user.last_bonus_at == today:
        logger.info("üéÅ –ë–æ–Ω—É—Å —É–∂–µ –ø–æ–ª—É—á–µ–Ω —Å–µ–≥–æ–¥–Ω—è")
        return {"received": False, "balance": user.balance}

    user.balance += bonus_amount
    user.last_bonus_at = today
    await db.commit()
    logger.info(f"üéâ –ë–æ–Ω—É—Å –≤—ã–¥–∞–Ω: +{bonus_amount}")

    return {"received": True, "balance": user.balance}


@app.post("/spend")
async def spend_crystals(req: SpendRequest, db: AsyncSession = Depends(get_session)):
    result = await db.execute(select(User).where(User.telegram_id == req.telegram_id))
    user = result.scalar_one_or_none()
    if not user:
        raise HTTPException(status_code=404, detail="User not found")

    if user.balance < req.amount:
        logger.warning(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤ —É {req.telegram_id}")
        raise HTTPException(status_code=400, detail="Not enough crystals")

    user.balance -= req.amount
    await db.commit()
    logger.info(f"üíé –°–ø–∏—Å–∞–Ω–æ {req.amount} –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤ —É {req.telegram_id}")

    return {"balance": user.balance}


@app.post("/reset_progress")
async def reset_progress(req: TelegramIdRequest, db: AsyncSession = Depends(get_session)):
    logger.info(f"üîÑ –°–±—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è: {req.telegram_id}")

    # 1. –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    result = await db.execute(select(User).where(User.telegram_id == req.telegram_id))
    user = result.scalar_one_or_none()
    if not user:
        raise HTTPException(status_code=404, detail="User not found")

    # 2. –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é
    result = await db.execute(select(Session).where(Session.user_id == user.id))
    session = result.scalar_one_or_none()

    if session:
        session.current_scene_id = START_SCENE_ID
    else:
        # –ï—Å–ª–∏ —Å–µ—Å—Å–∏–∏ –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë–º –µ—ë —Å –Ω—É–ª—è
        session = Session(user_id=user.id, current_scene_id=START_SCENE_ID)
        db.add(session)

    # 3. (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è UserStat
    user_stats_result = await db.execute(select(UserStat).where(UserStat.user_id == user.id))
    for user_stat in user_stats_result.scalars():
        user_stat.value = 0

    await db.commit()

    logger.info(f"üîÅ –ü—Ä–æ–≥—Ä–µ—Å—Å —Å–±—Ä–æ—à–µ–Ω –¥–ª—è {req.telegram_id}")
    return {"scene_id": session.current_scene_id, "balance": user.balance}